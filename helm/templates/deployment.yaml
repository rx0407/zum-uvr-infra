apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "helm-chart.fullname" . }}
  labels:
    {{- include "helm-chart.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "helm-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "helm-chart.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: zum-uvr
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: debug
          image: ubuntu:latest
          command: ["/bin/sleep", "3650d"]
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: secrets-store-inline
              mountPath: "/mnt/secrets-store"
              readOnly: true
            - name: jks
              mountPath: {{ .Values.kafka.ssl.keystore.location }}
              subPath: keystore.jks
              readOnly: true
            - name: jks
              mountPath: {{ .Values.kafka.ssl.truststore.location }}
              subPath: truststore.p12
              readOnly: true
            - name: dbcert
              mountPath: "/dbcert/db.pem"
              subPath: db.crt
          env:
            - name: ENV
              value: cloud
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: {{ .Values.kafka.bootstrapServers }}
            - name: KAFKA_SSL_KEYSTORE_LOCATION
              value: {{ .Values.kafka.ssl.keystore.location }}
            - name: KAFKA_SSL_TRUSTSTORE_LOCATION
              value: {{ .Values.kafka.ssl.truststore.location }}
          {{- range $k, $v := .Values.kafka.topics }}
            - name: {{ $k }}
              value: {{ $v }}
          {{- end }}
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  key: db.host
                  name: uvr-configmap
            - name: DB_USERNAME
              valueFrom:
                configMapKeyRef:
                  key: db.username
                  name: uvr-configmap
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db
                  key: password
            - name: KAFKA_SSL_KEY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka
                  key: ssl.key.password
            - name: KAFKA_SSL_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka
                  key: ssl.keystore.password
            - name: KAFKA_SSL_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka
                  key: ssl.truststore.password

        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ .Values.image.repository }}:{{ .Files.Get .Values.image.hashFile }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          volumeMounts:
            - name: secrets-store-inline
              mountPath: "/mnt/secrets-store"
              readOnly: true
            - name: jks
              mountPath: {{ .Values.kafka.ssl.keystore.location }}
              subPath: keystore.jks
              readOnly: true
            - name: jks
              mountPath: {{ .Values.kafka.ssl.truststore.location }}
              subPath: truststore.p12
              readOnly: true
            - name: dbcert
              mountPath: "/dbcert/db.pem"
              subPath: db.crt
          env:
            - name: ENV
              value: cloud
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: {{ .Values.kafka.bootstrapServers }}
            - name: KAFKA_SSL_KEYSTORE_LOCATION
              value: {{ .Values.kafka.ssl.keystore.location }}
            - name: KAFKA_SSL_TRUSTSTORE_LOCATION
              value: {{ .Values.kafka.ssl.truststore.location }}
          {{- range $k, $v := .Values.kafka.topics }}
            - name: {{ $k }}
              value: {{ $v }}
          {{- end }}
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  key: db.host
                  name: uvr-configmap
            - name: DB_USERNAME
              valueFrom:
                configMapKeyRef:
                  key: db.username
                  name: uvr-configmap
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db
                  key: password
            - name: KAFKA_SSL_KEY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka
                  key: ssl.key.password
            - name: KAFKA_SSL_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka
                  key: ssl.keystore.password
            - name: KAFKA_SSL_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka
                  key: ssl.truststore.password
          ports:
            - name: http
              containerPort: 8888
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 5
            httpGet:
              path: /health/liveness
              port: http
          readinessProbe:
            initialDelaySeconds: 5
            httpGet:
              path: /health/readiness
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: jks
          secret:
            secretName: jks
            defaultMode: 0400
        - name: dbcert
          secret:
            secretName: db.cert
            defaultMode: 0400
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "app.provider.secret"
